#!/usr/bin/python3
import argparse
import datetime
from metro_db import MetroDB
import pathlib
import jinja2
import yaml

from ros_rocks import download_yamls, read_distro_dicts, get_package_statuses, ROS1, get_all_distros

if __name__ == '__main__':
    current_folder = pathlib.Path(__file__).resolve().parent
    parser = argparse.ArgumentParser()
    parser.add_argument('output_path', type=pathlib.Path)
    parser.add_argument('quick_path', type=pathlib.Path, nargs='?')
    parser.add_argument('-q', '--quick', action='store_true')
    args = parser.parse_args()

    cache_folder = current_folder / 'the_yamls'
    cache_folder.mkdir(exist_ok=True)

    with MetroDB('build_status', folder=current_folder) as db:
        cached_status = pathlib.Path('status.yaml')
        if cached_status.exists() and args.quick:
            D = yaml.safe_load(open('status.yaml')).items()
        else:
            download_yamls(cache_folder, debug=False)
            read_distro_dicts(db, cache_folder)
            D = get_package_statuses(db)

        loader = jinja2.Environment(loader=jinja2.FileSystemLoader(str(current_folder)))
        template = loader.get_template('template.html')
        stamp = datetime.datetime.now(datetime.timezone.utc)

        def count_ros(D):
            for name, info in D:
                info['ros1'] = len([k for k in info['status'] if k in ROS1])
                info['ros2'] = len([k for k in info['status'] if k not in ROS1])
                yield name, info
        s = template.render(data=count_ros(D), now=stamp.timestamp(), distros=get_all_distros(db))

        with open(args.output_path, 'w') as f:
            f.write(s)

        if args.quick_path:
            s = template.render(data=count_ros(D), now=stamp.timestamp(),
                                distros=['noetic', 'humble', 'iron', 'rolling'])
            with open(args.quick_path, 'w') as f:
                f.write(s)
